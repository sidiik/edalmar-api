// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  admin
  agent_user
  customer
  user
}

enum application_type {
  visa
  passport
  certificate
}

enum application_status {
  pending
  approved
  rejected
  cancelled
}

enum agent_role {
  admin
  editor
  user
}

enum agent_status {
  active
  inactive
}

enum otp_reoson {
  sign_in
  password_reset
  delete_ticket
}

model user {
  id                    Int            @id @default(autoincrement())
  firstname             String
  lastname              String
  first_login           Boolean        @default(true)
  profile_url           String?
  login_attempts        Int            @default(0)
  lock_until            DateTime?
  is_2fa_enabled        Boolean        @default(true)
  is_suspended          Boolean        @default(false)
  address               String
  email                 String         @unique
  password              String
  phone_number          String         @unique
  whatsapp_number       String         @unique
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
  role                  role           @default(user)
  agent                 agent[]
  refresh_token_version String?
  session               session[]
  otp                   otp[]
  activity_log          activity_log[]
  // last_accessed_from    String?

  @@index([firstname, lastname, email, phone_number, whatsapp_number, role, created_at])
}

model agency {
  id                   Int           @id @default(autoincrement())
  name                 String        @unique
  slug                 String?       @unique
  agency_disabled      Boolean       @default(false)
  logo_url             String?
  address              String
  phone                String
  email                String
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  user_lock_minutes    Int?          @default(5)
  user_login_attempts  Int?          @default(5)
  account_lock_enabled Boolean       @default(true)
  max_agents           Int?          @default(5)
  agent                agent[]
  agency_keys          agency_keys?
  traveler             traveler[]
  ticket               ticket[]
  application          application[]

  @@index([name, slug, agency_disabled, created_at])
}

model agent {
  id           Int           @id @default(autoincrement())
  agent_status agent_status  @default(inactive)
  user_id      Int
  user         user          @relation(fields: [user_id], references: [id])
  agency       agency        @relation(fields: [agency_id], references: [id])
  role         agent_role    @default(user)
  agency_id    Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  start_hour   Int?
  end_hour     Int?
  agency_keys  agency_keys[]
  ticket       ticket[]
  application  application[]

  @@index([user_id, agency_id, agent_status, created_at])
}

model agency_keys {
  id                  Int      @id @default(autoincrement())
  agency_id           Int      @unique
  agency              agency   @relation(fields: [agency_id], references: [id])
  twilio_sid          String
  twilio_auth_token   String
  twilio_phone_number String?  @default("14155238886")
  whatsapp_auth_token String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  agent               agent?   @relation(fields: [agentId], references: [id])
  agentId             Int?

  @@index([twilio_sid, twilio_auth_token, twilio_phone_number, whatsapp_auth_token])
}

model session {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       user     @relation(fields: [user_id], references: [id])
  token      String   @unique
  user_agent String?
  device_id  String?  @unique
  expires_at DateTime
  revoked    Boolean  @default(false)
  ipAddress  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id, token, expires_at])
}

model otp {
  id         Int        @id @default(autoincrement())
  user_id    Int
  user       user       @relation(fields: [user_id], references: [id])
  otp        String
  reason     otp_reoson @default(sign_in)
  is_active  Boolean    @default(true)
  expires_at DateTime
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@index([user_id, otp, expires_at])
}

model activity_log {
  id          Int      @id @default(autoincrement())
  user        user     @relation(fields: [user_id], references: [id])
  user_id     Int
  action      String
  body        String?
  description String?
  ip_addres   String?
  user_agent  String?
  location    String?
  created_at  DateTime @default(now())

  @@index([user_id, action, created_at])
}

model traveler {
  id                    Int           @id @default(autoincrement())
  first_name            String
  last_name             String
  email                 String?
  phone                 String
  whatsapp_number       String
  address               String
  nationality           String
  dob                   DateTime?
  image_url             String?
  agency_id             Int
  agency                agency        @relation(fields: [agency_id], references: [id])
  notifications_enabled Boolean       @default(true)
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  tickets               ticket[]
  application           application[]

  @@unique([email, phone, whatsapp_number, agency_id])
  @@index([email, phone, whatsapp_number, first_name, last_name, notifications_enabled, created_at])
}

model ticket {
  id               Int           @id @default(autoincrement())
  ticket_reference String
  flight_number    String
  departure_time   DateTime
  arrival_time     DateTime
  return_date      DateTime?
  departure_city   String
  arrival_city     String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  ticket_media     ticket_media?
  is_deleted       Boolean       @default(false)
  last_notified    DateTime?
  agency           agency?       @relation(fields: [agencyId], references: [id])
  agencyId         Int?
  agent            agent?        @relation(fields: [agentId], references: [id])
  agentId          Int?
  traveler         traveler?     @relation(fields: [travelerId], references: [id])
  travelerId       Int?

  @@index([ticket_reference, departure_time, arrival_time, return_date, departure_city, arrival_city])
}

model ticket_media {
  id         Int      @id @default(autoincrement())
  ticket_id  Int      @unique
  ticket     ticket   @relation(fields: [ticket_id], references: [id])
  media_url  String
  key        String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([media_url, created_at])
}

model application {
  id                 Int                @id @default(autoincrement())
  note               String?
  application_ref    String             @unique
  application_status application_status @default(pending)
  metadata           String
  application_type   application_type
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  traveler_id        Int?
  traveler           traveler?          @relation(fields: [traveler_id], references: [id])
  agency_id          Int
  agency             agency             @relation(fields: [agency_id], references: [id])
  agent_id           Int
  agent              agent              @relation(fields: [agent_id], references: [id])
  due                DateTime
}
